#include <stdio.h>

int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 0) return x;
    }
    return 1;
}

char affineDecrypt(char cipher, int a, int b, int m) {
    if (cipher < 'A' || cipher > 'Z') {
        return cipher; 
    }
    int a_inv = modInverse(a, m);
    int x = (a_inv * (cipher - 'A' - b + m)) % m;
    return (char)(x + 'A');
}

int main() {
    char ciphertext[] = "YOUR CIPHERTEXT HERE";
    int m = 26;
    int C1 = 1; 
    int C2 = 20; 
    int P1 = 4; 
    int P2 = 19; 

    int a = (C2 - C1) * modInverse(P2 - P1, m) % m;
    if (a < 0) a += m;
    int b = (C1 - a * P1) % m;
    if (b < 0) b += m;

    printf("The keys are: a = %d, b = %d\n", a, b);

    printf("Decrypted text: ");
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        printf("%c", affineDecrypt(ciphertext[i], a, b, m));
    }
    printf("\n");

    return 0;
}
